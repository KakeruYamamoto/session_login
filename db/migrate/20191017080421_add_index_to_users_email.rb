class AddIndexToUsersEmail < ActiveRecord::Migration[5.2]
  def change
    add_index :users, :email, unique: true #:usersが追加したいテーブルで:emailが、そのテーブルの中にある、インデックスを追加する対象のカラムを指定します
  end#add_indexメソはusersテーブルのemailカラムにインデックスを追加するために使用している。
end
#インデックスとは「索引」の意味で、カラムからデータを取得するときのために、特定のカラムのデータを複製し、検索を行いやすくするためのもの

#

# $ rails g migration add_index_to_users_email   で作成
#記入後 $ rails db:migrate




# ログインシステム４
# ユニーク制約
# 次にメールアドレスにユニーク制約を設定します。
# これは同メールアドレスで複数のユーザの保存を防ぐためです。
#
# こちらは以下のようにvalidatesメソッドの:uniqueオプションを使用して、バリデーションを設定できます。
#
# 例
#
# validates :email, uniqueness: true
# しかし、このモデルのバリデーションだけでは、データベースレベルでのユニークである保証はないのです。
# 例えば、同メールアドレスでのユーザ作成のリクエストが連続で送信された時(送信ボタンを連打した時など)に、
# 複数のレコードとして、保存されてしまう場合があります。
#
# とてもレアなケースだと思われますが、Webサイトでは、
# トラフィックが多いときにこのようなバリデーションをくぐり抜けてしまう問題が発生する可能性が十分にあるのです。
#
# なので、データベースレベルでユニーク制約を設定して、これらの問題を解決していきます。（モデルでチェックするバリデーションとは違い、データベースレベルで一意性をチェックすることで、トラフィックの量などに関係なく確実に値をチェックできます。）
#
# 具体的にはデータベース上のemailのカラムにインデックスを追加し、そのインデックスがユニークであるようにすれば解決します。
#
# （インデックスとは「索引」の意味で、カラムからデータを取得するときのために、特定のカラムのデータを複製し、検索を行いやすくするためのものです）
